% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_event_locations.R
\name{generate_event_locations}
\alias{generate_event_locations}
\title{A Simulated Set of Events for a Specific State or County.}
\usage{
generate_event_locations(
  geography = c("state", "county", "cbsa", "combined statistical area"),
  rate,
  rate_per,
  population,
  family = c("poisson", "negative_binomial"),
  control = list(),
  state = NULL,
  county = NULL,
  labels = NULL,
  probs = NULL,
  time = 1,
  parallel = TRUE,
  n_cores = 4,
  progress = FALSE,
  ...
)
}
\arguments{
\item{geography}{Character string specifying the boundary type from the tigris package.

Available geographies include: 'state', 'county', 'cbsa', 'combined statistical area'

"cbsa" is used as alias for "metropolitan statistical area/  statistical area".}

\item{rate}{Data frame with event rate \code{event_rate} and unique geographic identifier \code{GEOID}.}

\item{rate_per}{Numeric. Rate of events per unit population (e.g., per 1.000).}

\item{population}{List with \code{GEOID} and estimated population \code{count}
for the target rate.}

\item{family}{A distribution family used to generate event counts. Options include \code{poisson} or \code{negative_binomial}.}

\item{control}{A list of parameters controlling the chosen distribution (e.g., dispersion for \code{negative_binomial}).}

\item{state}{The state for which the data is requested. State names, postal codes,
and FIPS codes are accepted. Default to \code{NULL}.}

\item{county}{The county for which data is requested. FIPS
codes are accepted. Default to \code{NULL}.}

\item{labels}{Label assigned to each generated event.}

\item{probs}{Numeric vector of probabilities corresponding to \code{labels}. If omitted, labels are sampled uniformly.}

\item{time}{Number of time periods to generate. By default 1.}

\item{parallel}{A logical (TRUE/FALSE) argument. If TRUE, the function runs in parallel using multiple cores. Default to \code{TRUE}}

\item{progress}{By default FALSE.}

\item{...}{Additional arguments passed to \code{tigris::counties()} and \code{geodata::population()}.}
}
\value{
A data frame of generated locations with:
\itemize{
\item \code{longitude}.
\item \code{latitude}.
\item \code{geoid:} Unique geographic identifier.
\item \code{label:} Label assigned to each generated event.
}
}
\description{
A Simulated Set of Events for a Specific State or County.
}
\details{
We generate realistic in-silico cohorts of events using rates at the county level.
Counts for each county are computed as: \code{time * event_rate *  count / rate_per}

Counts can be generated using different statistical distributions via the \code{family} argument,
including \code{poisson} or \code{negative binomial}, with control over
distribution-specific parameters (e.g., dispersion for negative binomial distribution \code{size}).

The events are distributed within counties in proportion to estimated population counts.
Latitude and longitude of each event are generated randomly, weighted by the GPWv4 population density map,
so denser areas are more likely to receive events, while sparsely populated areas receive fewer. The algorithm
also accounts for pixel area to avoid bias due to differing cell sizes.

A recursive accept-reject algorithm based on county or state boundaries ensures that all
generated points fall inside the target polygons while preserving the target counts and proportions.
}
\examples{
library(pointgen)
data(stroke_hospitalization)
population<-get_census_population(geography="county")
strokes<-generate_event_locations(geography="county",
                                  rate=stroke_hospitalization,
                                  rate_per=1000,
                                  population = population,
                                  family = "negative_binomial",
                                  control = list(size=10),
                                  labels=c("LVO","Non-LVO"),
                                  probs=c(0.6,0.4),
                                  state = "19")

}
\references{
\insertRef{Rpack:bibtex}{Rdpack}

\insertRef{R-exactextractr}{pointgen}

\insertRef{R-purrr}{pointgen}

\insertRef{R-tigris}{pointgen}

\insertRef{R-geodata}{pointgen}

\insertRef{R-dplyr}{pointgen}
}
