#library(pointgen)
library(dplyr)
library(ggplot2)
library(pointgen)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
population2023<-get_census_population(geography="state",state = "IOWA",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000,
state = "Iowa")
plot(mortality)
summary(mortality)
population2023<-get_census_population(geography="state",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000)
devtools::document("././")
install("././")
mortality<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
state = "Iowa",
county = "103",
labels=c("LVO","Non-LVO"),
probs=c(0.6,0.4),
time=5
)
rlang::last_trace()
population2023<-get_census_population(geography="state",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000)
plot(mortality)
summary(mortality)
population<-get_census_population(geography="county",age_group="65plus", state="IOWA", county = "103", vintage = 2021)
mortality<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
state = "Iowa",
county = "103",
labels=c("LVO","Non-LVO"),
probs=c(0.6,0.4),
time=5
)
plot(mortality)
plot(mortality)
devtools::document("././")
install("././")
devtools::document("././")
install("././")
library(dplyr)
library(ggplot2)
library(pointgen)
population2023<-get_census_population(geography="state",state = "IOWA",vintage = 2023)
population2023<-get_census_population(geography="state",state = "IOWA",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000,
state = "California")
plot(mortality)
population2023<-get_census_population(geography="state",state = "California",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000,
state = "California")
plot(mortality)
population<-get_census_population(geography="county",age_group="65plus", state="ILLINOIS", vintage = 2021)
plot(hospitalization)
population<-get_census_population(geography="county",age_group="65plus", state="ILLINOIS", vintage = 2021)
hospitalization<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
state = "Illinois")
plot(hospitalization)
hospitalization<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
labels=c("LVO","Non-LVO"),
probs=c(0.6,0.4),
state = "Illinois")
plot(hospitalization)
devtools::document("././")
devtools::document("././")
install("././")
devtools::document("././")
install("././")
get_boundary <- function(geography = c("state", "county", "zcta", "cbsa","combined statistical area"),
state = NULL,
county = NULL,
cb = TRUE,
...) {
geography <- match.arg(geography)
# Validate county codes if counties requested
if (geography == "county" && !is.null(county)) {
if (!all(nchar(county) == 3)) {
stop("Invalid 'county'. Example of a valid county FIPS code: '001'")
}
}
# Select correct tigris function
boundary_fun <- switch(
geography,
state = tigris::states,
county = tigris::counties,
cbsa   = tigris::core_based_statistical_areas,
`combined statistical area` = tigris::combined_statistical_areas,
)
fips<-tigris::fips_codes
# standardize state
if(!is.null(state)){
if (state %in% fips$state) {
state<-unique(sprintf("%02s", fips$state_code[fips$state == state]))
} else if (state %in% fips$state_name) {
state<-unique(sprintf("%02s", fips$state_code[fips$state_name == state]))
} else if (state %in% fips$state_code) {
state<-unique(sprintf("%02s", state))
} else {
stop("Unrecognized state identifier")
}
}
boundary <- boundary_fun(cb=cb,...)
# Retrieve boundary
if(!is.null(state) && is.null(county)){
boundary<-boundary[boundary$STATEFP %in% state, ]
}
# Apply county filter if needed
if (geography == "county" && !is.null(county)) {
boundary<-boundary[boundary$STATEFP %in% state, ]
boundary <- boundary[boundary$COUNTYFP %in% county, ]
}
# Standardizing geoid name
if(geography=="zcta"){
boundary<-boundary%>%rename(geoid=GEOID20)
}
return(boundary)
}
get_boundary('combined statistical area')
population<-get_census_population(geography="county",age_group="65plus", state="IOWA", county = "103", vintage = 2021)
population<-get_census_population(geography="county",age_group="65plus", state="ILLINOIS", vintage = 2021)
hospitalization<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
labels=c("LVO","Non-LVO"),
probs=c(0.6,0.4),
state = "Illinois")
plot(hospitalization)
population2023<-get_census_population(geography="state",vintage = 2023)
population2023<-get_census_population(geography="state",state = "California",vintage = 2023)
mortality<-generate_event_locations(geography="state",
rate=stroke_mortality,
population = population2023,
family = "negative_binomial",
control = list(size=10),
rate_per = 100000,
state = "California")
head(mortality)
population<-get_census_population(geography="county",age_group="65plus", state="ILLINOIS", vintage = 2021)
hospitalization<-generate_event_locations(geography="county",
rate=stroke_hospitalization,
population = population,
family = "negative_binomial",
control = list(size=10),
rate_per = 1000,
labels=c("LVO","Non-LVO"),
probs=c(0.6,0.4),
state = "Illinois")
devtools::document("././")
install("././")
